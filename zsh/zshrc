# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Lines configured by zsh-newuser-install

setopt autocd
setopt correct_all           # autocorrect commands
setopt extendedglob
setopt hist_ignore_all_dups
setopt hist_reduce_blanks
setopt share_history
setopt nomatch
setopt auto_list             # automatically list choices on ambiguous completion
setopt auto_menu             # automatically use menu completion
setopt always_to_end         # move cursor to end if word had one match
unsetopt beep

bindkey -v # enable vi mode
export KEYTIMEOUT=1 # make switch between INSERT/NORMAL modes easier; 10ms

# End of lines configured by zsh-newuser-install
# The following lines were added by compinstall
zstyle :compinstall filename '/home/stephan/.zshrc'

autoload -Uz compinit
compinit
# End of lines added by compinstall

_comp_options+=(globdots) # include hidden files in completions

case "$OSTYPE" in
  darwin*)
    source /opt/homebrew/opt/powerlevel10k/powerlevel10k.zsh-theme
  ;;
  linux*)
    source /usr/share/zsh-theme-powerlevel10k/powerlevel10k.zsh-theme
  ;;
esac

source "$ZDOTDIR/aliases"

# edit command line in nvim with `v`
autoload -Uz edit-command-line
zle -N edit-command-line
bindkey -M vicmd v edit-command-line

# sfdx/sf autocomplete setup
case "$OSTYPE" in
  darwin*)
    SFDX_AC_ZSH_SETUP_PATH=/Users/stephanspiegel/Library/Caches/sfdx/autocomplete/zsh_setup
    SF_AC_ZSH_SETUP_PATH=/Users/stephanspiegel/Library/Caches/sf/autocomplete/zsh_setup
  ;;
  linux*)
    SFDX_AC_ZSH_SETUP_PATH=/home/stephan/.cache/sfdx/autocomplete/zsh_setup
    SF_AC_ZSH_SETUP_PATH=/home/stephan/.config/cache/sf/autocomplete/zsh_setup
  ;;
esac
test -f $SFDX_AC_ZSH_SETUP_PATH && source $SFDX_AC_ZSH_SETUP_PATH;
test -f $SF_AC_ZSH_SETUP_PATH && source $SF_AC_ZSH_SETUP_PATH;
### Added by Zinit's installer
if [[ ! -f $HOME/.zinit/bin/zinit.zsh ]]; then
    print -P "%F{33}▓▒░ %F{220}Installing %F{33}DHARMA%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    command mkdir -p "$HOME/.zinit" && command chmod g-rwX "$HOME/.zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.zinit/bin" && \
        print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
        print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi

source "$HOME/.zinit/bin/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/z-a-rust \
    zdharma-continuum/z-a-as-monitor \
    zdharma-continuum/z-a-patch-dl \
    zdharma-continuum/z-a-bin-gem-node

### End of Zinit's installer chunk

zinit ice depth=1

# zplug "modules/history-substring-search", from:prezto, defer:2

zinit light zsh-users/zsh-autosuggestions
zinit light zdharma-continuum/fast-syntax-highlighting
zinit light djui/alias-tips
zinit light urbainvaes/fzf-marks
zinit light zuxfoucault/colored-man-pages_mod
zinit snippet OMZ::plugins/git/git.plugin.zsh
zinit snippet OMZ::plugins/sudo/sudo.plugin.zsh

zinit light Aloxaf/fzf-tab
zinit light aperezdc/zsh-fzy

# zinit ice depth=1
# zinit light jeffreytse/zsh-vi-mode

# autoload scripts
fpath=( ~/dotfiles/zsh/scripts "${fpath[@]}" )
autoload -Uz $fpath[1]/*(.:t)
case $(hostname) in
  Sams*) fpath=( ~/dotfiles/zsh/perch-scripts "${fpath[@]}" ) ;;
  foxwhelp) fpath=( ~/dotfiles/zsh/foxwhelp-scripts "${fpath[@]}" ) ;;
esac
autoload -Uz $fpath[1]/*(.:t)

# Allow user-level install for `npm -g` to avoid having to sudo
# https://wiki.archlinux.org/title/Node.js_#Node_Packaged_Modules
PATH="$HOME/.local/bin:$PATH"
export npm_config_prefix="$HOME/.local"

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# create a zkbd compatible hash for key mapping
# to add other keys to this hash, see: man 5 terminfo
typeset -g -A key
key[Home]="${terminfo[khome]}"
key[End]="${terminfo[kend]}"
key[Insert]="${terminfo[kich1]}"
key[Backspace]="${terminfo[kbs]}"
key[Delete]="${terminfo[kdch1]}"
key[Up]="${terminfo[kcuu1]}"
key[Down]="${terminfo[kcud1]}"
key[Left]="${terminfo[kcub1]}"
key[Right]="${terminfo[kcuf1]}"
key[PageUp]="${terminfo[kpp]}"
key[PageDown]="${terminfo[knp]}"
key[Shift-Tab]="${terminfo[kcbt]}"

# setup key accordingly
[[ -n "${key[Home]}"      ]] && bindkey -- "${key[Home]}"       beginning-of-line
[[ -n "${key[End]}"       ]] && bindkey -- "${key[End]}"        end-of-line
[[ -n "${key[Insert]}"    ]] && bindkey -- "${key[Insert]}"     overwrite-mode
[[ -n "${key[Backspace]}" ]] && bindkey -- "${key[Backspace]}"  backward-delete-char
[[ -n "${key[Delete]}"    ]] && bindkey -- "${key[Delete]}"     delete-char
[[ -n "${key[Up]}"        ]] && bindkey -- "${key[Up]}"         up-line-or-history
[[ -n "${key[Down]}"      ]] && bindkey -- "${key[Down]}"       down-line-or-history
[[ -n "${key[Left]}"      ]] && bindkey -- "${key[Left]}"       backward-char
[[ -n "${key[Right]}"     ]] && bindkey -- "${key[Right]}"      forward-char
[[ -n "${key[PageUp]}"    ]] && bindkey -- "${key[PageUp]}"     beginning-of-buffer-or-history
[[ -n "${key[PageDown]}"  ]] && bindkey -- "${key[PageDown]}"   end-of-buffer-or-history
[[ -n "${key[Shift-Tab]}" ]] && bindkey -- "${key[Shift-Tab]}"  reverse-menu-complete

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} && ${+terminfo[rmkx]} )); then
	autoload -Uz add-zle-hook-widget
	function zle_application_mode_start { echoti smkx }
	function zle_application_mode_stop { echoti rmkx }
	add-zle-hook-widget -Uz zle-line-init zle_application_mode_start
	add-zle-hook-widget -Uz zle-line-finish zle_application_mode_stop
fi

# only show the past commands matching the current line up to the current cursor position when Up or Down keys are pressed 
autoload -Uz up-line-or-beginning-search down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
[[ -n "${key[Up]}"   ]] && bindkey -M viins -- "${key[Up]}"   up-line-or-beginning-search
[[ -n "${key[Down]}" ]] && bindkey -M viins -- "${key[Down]}" down-line-or-beginning-search

# Text Objects: enables `da"` or `ci(` in normal mode
autoload -Uz select-bracketed select-quoted
zle -N select-quoted
zle -N select-bracketed
for km in viopp visual; do
  bindkey -M $km -- '-' vi-up-line-or-history
  for c in {a,i}${(s..)^:-\'\"\`\|,./:;=+@}; do
    bindkey -M $km $c select-quoted
  done
  for c in {a,i}${(s..)^:-'()[]{}<>bB'}; do
    bindkey -M $km $c select-bracketed
  done
done


case "$OSTYPE" in
  darwin*)
    [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
  ;;
  linux*)
    source /usr/share/fzf/completion.zsh    # use fzf completion
    source /usr/share/fzf/key-bindings.zsh  # use fzf completion key mappings

  ;;
esac
