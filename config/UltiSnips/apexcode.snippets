snippet sobject "Create an SObject for a unit test"
${1:SObjectType} ${2:sObjectName} = ($1)clsTestFactory.createSObject(new $1(
    $0
));
endsnippet
snippet debug "Debug variable or expression"
System.debug(LoggingLevel.DEBUG, '${1}: '+$1);
endsnippet
snippet test "Unit test method"
@isTest
static void itShould${1}(){
    Test.startTest();
    Test.stopTest();
    System.assertEquals(${2:expected}, ${3:actual});
}
endsnippet
snippet newlist "New list declaration"
List<${1:String}> ${VISUAL} = new List<${1}>();
endsnippet
snippet newset "New set declaration"
Set<${1:String}> ${VISUAL} = new Set<${1}>();
endsnippet
snippet newmap "New map declaration"
Map<${1:String}, ${2:String}> ${VISUAL} = new Map<${1}, ${2}>();
endsnippet
snippet for "For loop iterating a collection"
for (${1:String} ${2:item} : ${3:collection}) {
    $0
}
endsnippet
snippet fori "Traditional for loop"
for (Integer i = 0; i < ${1}; i++) {

}
endsnippet
snippet trycatch "Try/Catch block"
try{
  ${VISUAL}
} catch(Exception ex){

}
endsnippet  
snippet todo "todo comment"
@todo ${1:`!v strftime("%Y-%m-%d")`} Stephan Spiegel <sspiegel@zipari.com> ${2}
endsnippet
snippet lazym "Lazy-loaded member variable"
private ${1:String} ${2:variableName} {
  get {
    if($2 == null){
      $2 = new $1();
      $0
    }
    return $2;
  }
  private set;
}
endsnippet

global !p
def getArgs(group):
	import re
	word = re.compile('[a-zA-Z><.]+ \w+')
	return [i.split(" ") for i in word.findall(group) ]
endglobal

snippet md "Method With javadoc" b
/**
 * @description $5`!p
for i in getArgs(t[4]):
	snip.rv += "\n\t * @param " + i[1] + " usage..."`
 *`!p
if not "void" in t[2]:
	snip.rv = "\n\t * @return object"
else:
	snip.rv = ""`
 **/
${1:public} ${2:void} ${3:method}($4) {
	$0
}
endsnippet
snippet sql "SOQL query assigment to List variable"
List<$1> $2 = [
  SELECT 
    ${3}
  FROM $1
  ];
endsnippet
snippet sqm "SOQL query assigment to Map variable"
Map<Id, $1> $2 = new Map<Id, $1>([
  SELECT 
    ${3}
  FROM $1
  ]);
endsnippet
snippet sqit "Iterate over SOQL query"
for($1 $2 : [
  SELECT 
    ${3}
  FROM $1
  ]){
    $0
  }
endsnippet
snippet instt "Check object type with instanceof and down-cast it"
if($3 instanceOf $1){
  $1 $2 = ($1) $3;
  $0
}
endsnippet
snippet getset "Property getter and setter"
{ get; set; }
endsnippet
snippet ifmc "If Map contains key then get"
if($1.containsKey($2)) {
  $3 $2 = $1.get($2);
  $0
}
endsnippet
snippet docm "ApexDoc method comment"
/**
 * @description $1
 * @param $2 $3
 * $0
 * @return 
 */
endsnippet
snippet doc "ApexDoc comment"
/**
* @description $1
*/
endsnippet
snippet param "ApexDoc parameter comment"
* @param $1
endsnippet
